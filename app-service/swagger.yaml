basePath: /api/v1
definitions:
  BasketAPI.Game:
    properties:
      awayScore:
        type: integer
      awayTeam:
        $ref: '#/definitions/BasketAPI.TeamInfo'
      date:
        type: string
      gameStatus:
        type: string
      homeScore:
        type: integer
      homeTeam:
        $ref: '#/definitions/BasketAPI.TeamInfo'
      id:
        type: integer
    type: object
  BasketAPI.GameDetails:
    properties:
      awayScore:
        type: integer
      awayTeam:
        $ref: '#/definitions/BasketAPI.TeamInfoExtended'
      date:
        type: string
      gameStatus:
        type: string
      homeScore:
        type: integer
      homeTeam:
        $ref: '#/definitions/BasketAPI.TeamInfoExtended'
      id:
        type: integer
    type: object
  BasketAPI.PlayerEntity:
    properties:
      id:
        type: integer
      name:
        type: string
      stats:
        $ref: '#/definitions/BasketAPI.PlayerStats'
    type: object
  BasketAPI.PlayerStats:
    properties:
      ast:
        type: integer
      blk:
        type: integer
      dreb:
        type: integer
      fga:
        type: integer
      fgm:
        type: integer
      fp:
        type: integer
      fta:
        type: integer
      ftm:
        type: integer
      min:
        type: number
      oreb:
        type: integer
      pts:
        type: integer
      reb:
        type: integer
      sec:
        type: integer
      stl:
        type: integer
      to:
        type: integer
      tpa:
        type: integer
      tpm:
        type: integer
    type: object
  BasketAPI.TeamInfo:
    properties:
      abbr:
        type: string
      arenaName:
        type: string
      arenaSize:
        type: integer
      color:
        type: string
      id:
        type: integer
      logo:
        type: string
      name:
        type: string
      secondaryColor:
        type: string
      shortName:
        type: string
      slug:
        type: string
    type: object
  BasketAPI.TeamInfoExtended:
    properties:
      abbr:
        type: string
      arenaName:
        type: string
      arenaSize:
        type: integer
      color:
        type: string
      id:
        type: integer
      logo:
        type: string
      name:
        type: string
      players:
        items:
          $ref: '#/definitions/BasketAPI.PlayerEntity'
        type: array
      secondaryColor:
        type: string
      shortName:
        type: string
      slug:
        type: string
      stats:
        $ref: '#/definitions/BasketAPI.TeamStats'
    type: object
  BasketAPI.TeamStats:
    properties:
      ast:
        type: integer
      blk:
        type: integer
      fp:
        type: integer
      reb:
        type: integer
      stl:
        type: integer
      to:
        type: integer
    type: object
  RSC.Current:
    properties:
      Quarter:
        $ref: '#/definitions/RSC.Quarter'
      TimeRemaining:
        type: string
    type: object
  RSC.FullBox:
    properties:
      away_team:
        $ref: '#/definitions/RSC.TeamBoxItem'
      current:
        $ref: '#/definitions/RSC.Current'
      home_team:
        $ref: '#/definitions/RSC.TeamBoxItem'
    type: object
  RSC.InjuryItem:
    properties:
      injuries:
        items:
          $ref: '#/definitions/RSC.PlayerInjuryItem'
        type: array
      team:
        type: string
      team_id:
        type: integer
    type: object
  RSC.LiveFeedItem:
    properties:
      away_team_name:
        type: string
      broadcast:
        type: string
      event_name:
        $ref: '#/definitions/RSC.ScheduleEventName'
      full_box:
        $ref: '#/definitions/RSC.FullBox'
      game_ID:
        type: string
      game_location:
        type: string
      game_status:
        type: string
      game_time:
        type: string
      home_team_name:
        type: string
      player_box:
        $ref: '#/definitions/RSC.PlayerBox'
      round: {}
      season:
        type: string
      season_type:
        $ref: '#/definitions/RSC.ScheduleType'
      sport:
        $ref: '#/definitions/RSC.Sport'
      status:
        $ref: '#/definitions/RSC.ScheduleStatus'
    type: object
  RSC.PlayerBox:
    properties:
      away_team:
        additionalProperties:
          $ref: '#/definitions/RSC.PlayerBoxItem'
        type: object
      home_team:
        additionalProperties:
          $ref: '#/definitions/RSC.PlayerBoxItem'
        type: object
    type: object
  RSC.PlayerBoxItem:
    properties:
      assists:
        type: integer
      blocks:
        type: integer
      defensive_rebounds:
        type: integer
      field_goals_attempted:
        type: integer
      field_goals_made:
        type: integer
      fouls:
        type: integer
      free_throws_attempted:
        type: integer
      free_throws_made:
        type: integer
      minutes:
        type: string
      offensive_rebounds:
        type: integer
      player:
        type: string
      points:
        type: integer
      position:
        $ref: '#/definitions/RSC.PlayerPosition'
      status:
        $ref: '#/definitions/RSC.PlayerStatus'
      steals:
        type: integer
      three_points_attempted:
        type: integer
      three_points_made:
        type: integer
      total_rebounds:
        type: integer
      turnovers:
        type: integer
      two_point_percentage:
        type: number
      two_points_attempted:
        type: integer
      two_points_made:
        type: integer
    type: object
  RSC.PlayerInfoItemExtended:
    properties:
      age:
        type: string
      college:
        type: string
      headshot:
        type: string
      height:
        type: string
      number:
        type: integer
      player:
        type: string
      player_id:
        type: integer
      position:
        $ref: '#/definitions/RSC.PlayerPosition'
      position_category:
        $ref: '#/definitions/RSC.PlayerPosition'
      status:
        $ref: '#/definitions/RSC.PlayerStatus'
      team:
        type: string
      team_id:
        type: integer
      weight:
        type: integer
    type: object
  RSC.PlayerInjuryItem:
    properties:
      date_injured:
        type: string
      injury:
        type: string
      player:
        type: string
      player_id:
        type: string
      returns:
        type: string
    type: object
  RSC.PlayerPosition:
    enum:
    - C
    - F
    - G
    - FC
    - GF
    - SF
    - SG
    - PF
    - PG
    type: string
    x-enum-varnames:
    - C
    - F
    - G
    - FC
    - GF
    - SF
    - SG
    - PF
    - PG
  RSC.PlayerSeasonStatItem:
    properties:
      player:
        type: string
      player_id:
        type: integer
      postseason:
        $ref: '#/definitions/RSC.PlayerStatsItem'
      regular_season:
        $ref: '#/definitions/RSC.PlayerStatsItem'
      team:
        type: string
      team_id:
        type: integer
    type: object
  RSC.PlayerStatsItem:
    properties:
      assists:
        type: integer
      blocks:
        type: integer
      defensive_rebounds:
        type: integer
      field_goals_attempted:
        type: integer
      field_goals_made:
        type: integer
      fouls:
        type: integer
      free_throws_attempted:
        type: integer
      free_throws_made:
        type: integer
      games_played:
        type: integer
      minutes:
        type: integer
      offensive_rebounds:
        type: integer
      points:
        type: integer
      steals:
        type: integer
      three_points_attempted:
        type: integer
      three_points_made:
        type: integer
      total_rebounds:
        type: integer
      turnovers:
        type: integer
      two_points_attempted:
        type: integer
      two_points_made:
        type: integer
    type: object
  RSC.PlayerStatus:
    enum:
    - ACT
    - INACT
    - QUES
    type: string
    x-enum-varnames:
    - Act
    - Inact
    - Ques
  RSC.Quarter:
    enum:
    - 1
    - 2
    - 3
    - 4
    - 5
    type: integer
    x-enum-varnames:
    - First
    - Second
    - Third
    - Fourth
    - Fifth
  RSC.QuarterScores:
    properties:
      "1":
        type: integer
      "2":
        type: integer
      "3":
        type: integer
      "4":
        type: integer
      OT:
        type: integer
    type: object
  RSC.ScheduleEventName:
    enum:
    - First Round
    - Semifinals
    - Conference Finals
    - NBA Finals
    type: string
    x-enum-varnames:
    - FirstRound
    - Semifinals
    - ConferenceFinals
    - NBAFinals
  RSC.ScheduleItem:
    properties:
      away_team:
        type: string
      away_team_ID:
        type: integer
      broadcast:
        type: string
      event_name:
        $ref: '#/definitions/RSC.ScheduleEventName'
      game_ID:
        type: string
      game_time:
        type: string
      home_team:
        type: string
      home_team_ID:
        type: integer
      round:
        $ref: '#/definitions/RSC.ScheduleRound'
      season:
        type: string
      season_type:
        $ref: '#/definitions/RSC.ScheduleType'
      status:
        $ref: '#/definitions/RSC.ScheduleStatus'
    type: object
  RSC.ScheduleRound:
    enum:
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - One
    - Two
    - Three
    - Four
  RSC.ScheduleStatus:
    enum:
    - scheduled
    - delayed
    - postponed
    - suspended
    - canceled
    - inprogress
    - final
    - completed
    type: string
    x-enum-varnames:
    - Scheduled
    - Delayed
    - Postponed
    - Suspended
    - Canceled
    - Inprogress
    - Final
    - Completed
  RSC.ScheduleType:
    enum:
    - Preseason
    - Regular Season
    - Postseason
    type: string
    x-enum-varnames:
    - Preseason
    - RegularSeason
    - Postseason
  RSC.Sport:
    enum:
    - NBA
    type: string
    x-enum-varnames:
    - NBA
  RSC.TeamBoxItem:
    properties:
      abbrv:
        type: string
      division_name:
        type: string
      mascot:
        type: string
      quarter_scores:
        $ref: '#/definitions/RSC.QuarterScores'
      record:
        type: string
      score:
        type: integer
      team_id:
        type: integer
      team_stats:
        $ref: '#/definitions/RSC.TeamBoxStats'
    type: object
  RSC.TeamBoxStats:
    properties:
      assists:
        type: integer
      blocks:
        type: integer
      defensive_rebounds:
        type: integer
      field_goals_attempted:
        type: integer
      field_goals_made:
        type: integer
      fouls:
        type: integer
      free_throws_attempted:
        type: integer
      free_throws_made:
        type: integer
      offensive_rebounds:
        type: integer
      steals:
        type: integer
      three_points_attempted:
        type: integer
      three_points_made:
        type: integer
      total_rebounds:
        type: integer
      turnovers:
        type: integer
      two_point_percentage:
        type: number
      two_points_attempted:
        type: integer
      two_points_made:
        type: integer
    type: object
  RSC.TeamInfoItemExtended:
    properties:
      abbrv:
        type: string
      arena:
        type: string
      color:
        type: string
      conf:
        type: string
      location:
        type: string
      logo:
        type: string
      mascot:
        type: string
      team:
        type: string
      team_id:
        type: integer
    type: object
  RSC.TeamSeasonStatItem:
    properties:
      postseason:
        $ref: '#/definitions/RSC.TeamStatsItem'
      regular_season:
        $ref: '#/definitions/RSC.TeamStatsItem'
      team:
        type: string
      team_id:
        type: integer
    type: object
  RSC.TeamStatsItem:
    properties:
      assists:
        type: integer
      blocks:
        type: integer
      defensive_rebounds:
        type: integer
      field_goals_attempted:
        type: integer
      field_goals_made:
        type: integer
      fouls:
        type: integer
      free_throws_attempted:
        type: integer
      free_throws_made:
        type: integer
      games_played:
        type: integer
      losses:
        type: integer
      offensive_rebounds:
        type: integer
      points:
        type: integer
      steals:
        type: integer
      three_points_attempted:
        type: integer
      three_points_made:
        type: integer
      total_rebounds:
        type: integer
      turnovers:
        type: integer
      two_points_attempted:
        type: integer
      two_points_made:
        type: integer
      wins:
        type: integer
    type: object
  chatService.Channel:
    properties:
      id:
        type: string
      read-only:
        description: Indicates whether or not messages can be "published" into the
          channel
        type: boolean
      resource:
        description: value to be passed to Ably's `channels.get() method`
        type: string
      title:
        description: Human readable version of the channel name to be used for UI
          rendering
        type: string
    type: object
  chatService.CreateChannelDTO:
    properties:
      name:
        description: |-
          second part of the channel resource name to be concatenated with
          the `chat group` name via `:`.
        type: string
      summary:
        description: Optional summary, potentially lengthy text
        type: string
      title:
        description: human-readable "title" of the channel
        type: string
    required:
    - name
    - title
    type: object
  chatService.CreateChatGroupDTO:
    properties:
      isPrivate:
        description: |-
          Private chat groups require invitation from the owner.
          Public chat group can be freely joined by using `/join` endpoint
        type: boolean
      name:
        description: |-
          used to form Ably resource identifier for chat group as `chat:<name>`,
          it should be unique across all chat groups owned by the same user
        type: string
      summary:
        description: Optional summary, potentially lengthy text
        type: string
      title:
        description: human-readable "title" of the chat group, will be displayed in
          UI and used for searching
        type: string
    required:
    - name
    - title
    type: object
  chatService.GroupedChannels:
    properties:
      id:
        type: string
      resources:
        items:
          $ref: '#/definitions/chatService.Channel'
        type: array
      summary:
        type: string
      title:
        type: string
    type: object
  chatService.InviteToPrivateChannelDTO:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  chatService.SearchResultItem:
    properties:
      channels:
        description: all channels associated with the parent chat group
        items:
          $ref: '#/definitions/models.Chat'
        type: array
      chatGroup:
        allOf:
        - $ref: '#/definitions/models.Chat'
        description: parent public chat group for all listed channels
    type: object
  controller.AblyTokenRequest:
    properties:
      capability:
        type: string
      clientId:
        type: string
      keyName:
        type: string
      mac:
        type: string
      nonce:
        type: string
      timestamp:
        type: integer
      ttl:
        type: integer
    type: object
  controller.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  models.Chat:
    properties:
      id:
        type: string
      is_private:
        type: boolean
      owner_id:
        type: string
      parent_id:
        type: string
      resource:
        type: string
      summary:
        type: string
      title:
        type: string
    type: object
host: www.quible.io
info:
  contact: {}
  description: Wrapper to RSC API
  title: Quible app-service
  version: "0.1"
paths:
  /chat/channels:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/chatService.GroupedChannels'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: List user's channels and their parent chat groups
      tags:
      - chat
      - private
    post:
      consumes:
      - application/json
      parameters:
      - description: ID of the parent `chat group`
        format: uuid
        in: query
        name: chatGroupId
        type: string
      - description: New channel details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chatService.CreateChannelDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Chat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create a channel within the specified chat group (logged in user must
        own that chat group)
      tags:
      - chat
      - private
  /chat/channels/{channelId}:
    delete:
      parameters:
      - description: Channel ID
        format: uuid
        in: path
        name: channelId
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Leave previously joined channel
      tags:
      - chat
      - private
    post:
      parameters:
      - description: Channel ID
        format: uuid
        in: path
        name: channelId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Join public channel (channel associated with a public chat group)
      tags:
      - chat
      - private
  /chat/channels/{channelId}/invite:
    post:
      parameters:
      - description: Channel ID
        format: uuid
        in: path
        name: channelId
        required: true
        type: string
      - description: Contains invitee's email
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chatService.InviteToPrivateChannelDTO'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Invite a user to join private channel
      tags:
      - chat
      - private
  /chat/channels/list:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/chatService.Channel'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: List user's channels
      tags:
      - chat
      - private
  /chat/groups:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Chat'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: List chat groups owned by the logged in user
      tags:
      - chat
      - private
    post:
      consumes:
      - application/json
      parameters:
      - description: New chat group details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chatService.CreateChatGroupDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Chat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Create a chat group owned by the logged in user
      tags:
      - chat
      - private
  /chat/groups/{chatGroupId}:
    delete:
      parameters:
      - description: Chat group ID
        format: uuid
        in: path
        name: chatGroupId
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Delete chat group (logged in user must be the owner)
      tags:
      - chat
      - private
  /chat/groups/search:
    get:
      parameters:
      - description: partial match for a chat group title, if not provided returns
          all public results
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/chatService.SearchResultItem'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Search public chat groups by partially matched title
      tags:
      - chat
      - public
  /chat/token:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.AblyTokenRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get new Ably TokenRequest associated with the logged in user
      tags:
      - chat
      - private
  /daily-schedule:
    get:
      description: Returns list of games for the next 7 days
      parameters:
      - description: Team ID
        in: query
        name: team_id
        type: integer
      - description: Game ID
        in: query
        name: game_id
        type: string
      - default: now
        description: Report for date and 7 days in advance
        example: "2023-11-23"
        format: date
        in: query
        name: date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/RSC.ScheduleItem'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "424":
          description: Failed Dependency
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get Daily Schedule
      tags:
      - RSC
      - private
  /docs:
    get:
      description: Render Swagger UI page
      parameters:
      - default: swagger
        description: UI template
        enum:
        - swagger
        - rapidoc
        - redoc
        in: query
        name: ui
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Swagger UI
      tags:
      - docs
      - public
  /docs/errors:
    get:
      description: Renders the list of errors reported by the microservice
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Error Codes UI
      tags:
      - docs
      - public
  /docs/spec:
    get:
      description: Swagger spec in YAML format
      produces:
      - application/yaml
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Swagger spec
      tags:
      - docs
      - public
  /game:
    get:
      parameters:
      - description: ID of the BasketAPI match
        in: query
        name: gameId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/BasketAPI.GameDetails'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "424":
          description: Failed Dependency
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get game details
      tags:
      - BasketAPI
      - private
  /games:
    get:
      parameters:
      - description: Specific date to list games for
        example: "2024-01-20"
        format: date
        in: query
        name: date
        required: true
        type: string
      - description: Local TZ shift (to UTC) in hours to relate game start time. Defaults
          to EST/EDT timezone
        example: "-7"
        in: query
        name: localTimeZoneShift
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/BasketAPI.Game'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "424":
          description: Failed Dependency
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get list of games on a specific date
      tags:
      - BasketAPI
      - private
  /injuries:
    get:
      description: Returns list of recorded players injuries
      parameters:
      - description: Team ID
        in: query
        name: team_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/RSC.InjuryItem'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "424":
          description: Failed Dependency
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get players injuries
      tags:
      - RSC
      - private
  /live:
    get:
      description: Returns [live] data on current/past game(s)
      parameters:
      - default: now
        description: Specific date returns started and finished events from that date
        example: "2023-11-23"
        format: date
        in: query
        name: date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/RSC.LiveFeedItem'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "424":
          description: Failed Dependency
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get live feed
      tags:
      - RSC
      - private
  /live/token:
    get:
      description: Returns anonymous signed Ably token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.AblyTokenRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get new `TokenRequest` for client Ably SDK
      tags:
      - BasketAPI
      - public
  /player-info:
    get:
      description: Returns list of players of all or selected team
      parameters:
      - description: Team ID
        in: query
        name: team_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/RSC.PlayerInfoItemExtended'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "424":
          description: Failed Dependency
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get list of players
      tags:
      - RSC
      - private
  /player-stats:
    get:
      description: Returns players stats for the selected season
      parameters:
      - description: Team ID
        in: query
        name: team_id
        type: integer
      - description: Player ID
        in: query
        name: player_id
        type: integer
      - default: <current season>
        description: Beginning of sport season
        example: "2023"
        in: query
        name: date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/RSC.PlayerSeasonStatItem'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "424":
          description: Failed Dependency
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get player(s) stats
      tags:
      - RSC
      - private
  /schedule-season:
    get:
      description: Returns list of games for the selected season
      parameters:
      - default: <current season>
        description: Sport season
        example: "2023"
        in: query
        name: date
        type: string
      - description: Team ID
        in: query
        name: team_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/RSC.ScheduleItem'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "424":
          description: Failed Dependency
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get Schedule for Season
      tags:
      - RSC
      - private
  /team-info:
    get:
      description: Returns list of teams or a single team info
      parameters:
      - description: Team ID
        in: query
        name: team_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/RSC.TeamInfoItemExtended'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "424":
          description: Failed Dependency
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get list of teams
      tags:
      - RSC
      - private
  /team-stats:
    get:
      description: Returns teams stats for the selected season
      parameters:
      - description: Team ID
        in: query
        name: team_id
        type: integer
      - default: <current season>
        description: Beginning of sport season
        example: "2023"
        in: query
        name: date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/RSC.TeamSeasonStatItem'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "424":
          description: Failed Dependency
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get team(s) stats
      tags:
      - RSC
      - private
swagger: "2.0"
