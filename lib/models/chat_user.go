// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChatUser is an object representing the database table.
type ChatUser struct {
	ChatID   string `boil:"chat_id" json:"chat_id" toml:"chat_id" yaml:"chat_id"`
	UserID   string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	IsRo     bool   `boil:"is_ro" json:"is_ro" toml:"is_ro" yaml:"is_ro"`
	Disabled bool   `boil:"disabled" json:"disabled" toml:"disabled" yaml:"disabled"`

	R *chatUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chatUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChatUserColumns = struct {
	ChatID   string
	UserID   string
	IsRo     string
	Disabled string
}{
	ChatID:   "chat_id",
	UserID:   "user_id",
	IsRo:     "is_ro",
	Disabled: "disabled",
}

var ChatUserTableColumns = struct {
	ChatID   string
	UserID   string
	IsRo     string
	Disabled string
}{
	ChatID:   "chat_user.chat_id",
	UserID:   "chat_user.user_id",
	IsRo:     "chat_user.is_ro",
	Disabled: "chat_user.disabled",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var ChatUserWhere = struct {
	ChatID   whereHelperstring
	UserID   whereHelperstring
	IsRo     whereHelperbool
	Disabled whereHelperbool
}{
	ChatID:   whereHelperstring{field: "\"chat_user\".\"chat_id\""},
	UserID:   whereHelperstring{field: "\"chat_user\".\"user_id\""},
	IsRo:     whereHelperbool{field: "\"chat_user\".\"is_ro\""},
	Disabled: whereHelperbool{field: "\"chat_user\".\"disabled\""},
}

// ChatUserRels is where relationship names are stored.
var ChatUserRels = struct {
	Chat string
	User string
}{
	Chat: "Chat",
	User: "User",
}

// chatUserR is where relationships are stored.
type chatUserR struct {
	Chat *Chat `boil:"Chat" json:"Chat" toml:"Chat" yaml:"Chat"`
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*chatUserR) NewStruct() *chatUserR {
	return &chatUserR{}
}

func (r *chatUserR) GetChat() *Chat {
	if r == nil {
		return nil
	}
	return r.Chat
}

func (r *chatUserR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// chatUserL is where Load methods for each relationship are stored.
type chatUserL struct{}

var (
	chatUserAllColumns            = []string{"chat_id", "user_id", "is_ro", "disabled"}
	chatUserColumnsWithoutDefault = []string{"chat_id", "user_id"}
	chatUserColumnsWithDefault    = []string{"is_ro", "disabled"}
	chatUserPrimaryKeyColumns     = []string{"chat_id", "user_id"}
	chatUserGeneratedColumns      = []string{}
)

type (
	// ChatUserSlice is an alias for a slice of pointers to ChatUser.
	// This should almost always be used instead of []ChatUser.
	ChatUserSlice []*ChatUser
	// ChatUserHook is the signature for custom ChatUser hook methods
	ChatUserHook func(context.Context, boil.ContextExecutor, *ChatUser) error

	chatUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chatUserType                 = reflect.TypeOf(&ChatUser{})
	chatUserMapping              = queries.MakeStructMapping(chatUserType)
	chatUserPrimaryKeyMapping, _ = queries.BindMapping(chatUserType, chatUserMapping, chatUserPrimaryKeyColumns)
	chatUserInsertCacheMut       sync.RWMutex
	chatUserInsertCache          = make(map[string]insertCache)
	chatUserUpdateCacheMut       sync.RWMutex
	chatUserUpdateCache          = make(map[string]updateCache)
	chatUserUpsertCacheMut       sync.RWMutex
	chatUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chatUserAfterSelectHooks []ChatUserHook

var chatUserBeforeInsertHooks []ChatUserHook
var chatUserAfterInsertHooks []ChatUserHook

var chatUserBeforeUpdateHooks []ChatUserHook
var chatUserAfterUpdateHooks []ChatUserHook

var chatUserBeforeDeleteHooks []ChatUserHook
var chatUserAfterDeleteHooks []ChatUserHook

var chatUserBeforeUpsertHooks []ChatUserHook
var chatUserAfterUpsertHooks []ChatUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChatUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChatUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChatUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChatUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChatUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChatUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChatUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChatUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChatUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chatUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChatUserHook registers your hook function for all future operations.
func AddChatUserHook(hookPoint boil.HookPoint, chatUserHook ChatUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chatUserAfterSelectHooks = append(chatUserAfterSelectHooks, chatUserHook)
	case boil.BeforeInsertHook:
		chatUserBeforeInsertHooks = append(chatUserBeforeInsertHooks, chatUserHook)
	case boil.AfterInsertHook:
		chatUserAfterInsertHooks = append(chatUserAfterInsertHooks, chatUserHook)
	case boil.BeforeUpdateHook:
		chatUserBeforeUpdateHooks = append(chatUserBeforeUpdateHooks, chatUserHook)
	case boil.AfterUpdateHook:
		chatUserAfterUpdateHooks = append(chatUserAfterUpdateHooks, chatUserHook)
	case boil.BeforeDeleteHook:
		chatUserBeforeDeleteHooks = append(chatUserBeforeDeleteHooks, chatUserHook)
	case boil.AfterDeleteHook:
		chatUserAfterDeleteHooks = append(chatUserAfterDeleteHooks, chatUserHook)
	case boil.BeforeUpsertHook:
		chatUserBeforeUpsertHooks = append(chatUserBeforeUpsertHooks, chatUserHook)
	case boil.AfterUpsertHook:
		chatUserAfterUpsertHooks = append(chatUserAfterUpsertHooks, chatUserHook)
	}
}

// OneG returns a single chatUser record from the query using the global executor.
func (q chatUserQuery) OneG(ctx context.Context) (*ChatUser, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single chatUser record from the query.
func (q chatUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChatUser, error) {
	o := &ChatUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for chat_user")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ChatUser records from the query using the global executor.
func (q chatUserQuery) AllG(ctx context.Context) (ChatUserSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ChatUser records from the query.
func (q chatUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChatUserSlice, error) {
	var o []*ChatUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ChatUser slice")
	}

	if len(chatUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ChatUser records in the query using the global executor
func (q chatUserQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ChatUser records in the query.
func (q chatUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count chat_user rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q chatUserQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q chatUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if chat_user exists")
	}

	return count > 0, nil
}

// Chat pointed to by the foreign key.
func (o *ChatUser) Chat(mods ...qm.QueryMod) chatQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChatID),
	}

	queryMods = append(queryMods, mods...)

	return Chats(queryMods...)
}

// User pointed to by the foreign key.
func (o *ChatUser) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadChat allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chatUserL) LoadChat(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChatUser interface{}, mods queries.Applicator) error {
	var slice []*ChatUser
	var object *ChatUser

	if singular {
		var ok bool
		object, ok = maybeChatUser.(*ChatUser)
		if !ok {
			object = new(ChatUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChatUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChatUser))
			}
		}
	} else {
		s, ok := maybeChatUser.(*[]*ChatUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChatUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChatUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chatUserR{}
		}
		args = append(args, object.ChatID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatUserR{}
			}

			for _, a := range args {
				if a == obj.ChatID {
					continue Outer
				}
			}

			args = append(args, obj.ChatID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chats`),
		qm.WhereIn(`chats.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Chat")
	}

	var resultSlice []*Chat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Chat")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chats")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chats")
	}

	if len(chatAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chat = foreign
		if foreign.R == nil {
			foreign.R = &chatR{}
		}
		foreign.R.ChatUsers = append(foreign.R.ChatUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChatID == foreign.ID {
				local.R.Chat = foreign
				if foreign.R == nil {
					foreign.R = &chatR{}
				}
				foreign.R.ChatUsers = append(foreign.R.ChatUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chatUserL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChatUser interface{}, mods queries.Applicator) error {
	var slice []*ChatUser
	var object *ChatUser

	if singular {
		var ok bool
		object, ok = maybeChatUser.(*ChatUser)
		if !ok {
			object = new(ChatUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChatUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChatUser))
			}
		}
	} else {
		s, ok := maybeChatUser.(*[]*ChatUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChatUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChatUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chatUserR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatUserR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ChatUsers = append(foreign.R.ChatUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ChatUsers = append(foreign.R.ChatUsers, local)
				break
			}
		}
	}

	return nil
}

// SetChatG of the chatUser to the related item.
// Sets o.R.Chat to related.
// Adds o to related.R.ChatUsers.
// Uses the global database handle.
func (o *ChatUser) SetChatG(ctx context.Context, insert bool, related *Chat) error {
	return o.SetChat(ctx, boil.GetContextDB(), insert, related)
}

// SetChat of the chatUser to the related item.
// Sets o.R.Chat to related.
// Adds o to related.R.ChatUsers.
func (o *ChatUser) SetChat(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Chat) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chat_user\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chat_id"}),
		strmangle.WhereClause("\"", "\"", 2, chatUserPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ChatID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChatID = related.ID
	if o.R == nil {
		o.R = &chatUserR{
			Chat: related,
		}
	} else {
		o.R.Chat = related
	}

	if related.R == nil {
		related.R = &chatR{
			ChatUsers: ChatUserSlice{o},
		}
	} else {
		related.R.ChatUsers = append(related.R.ChatUsers, o)
	}

	return nil
}

// SetUserG of the chatUser to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ChatUsers.
// Uses the global database handle.
func (o *ChatUser) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the chatUser to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ChatUsers.
func (o *ChatUser) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chat_user\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, chatUserPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ChatID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &chatUserR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			ChatUsers: ChatUserSlice{o},
		}
	} else {
		related.R.ChatUsers = append(related.R.ChatUsers, o)
	}

	return nil
}

// ChatUsers retrieves all the records using an executor.
func ChatUsers(mods ...qm.QueryMod) chatUserQuery {
	mods = append(mods, qm.From("\"chat_user\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chat_user\".*"})
	}

	return chatUserQuery{q}
}

// FindChatUserG retrieves a single record by ID.
func FindChatUserG(ctx context.Context, chatID string, userID string, selectCols ...string) (*ChatUser, error) {
	return FindChatUser(ctx, boil.GetContextDB(), chatID, userID, selectCols...)
}

// FindChatUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChatUser(ctx context.Context, exec boil.ContextExecutor, chatID string, userID string, selectCols ...string) (*ChatUser, error) {
	chatUserObj := &ChatUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chat_user\" where \"chat_id\"=$1 AND \"user_id\"=$2", sel,
	)

	q := queries.Raw(query, chatID, userID)

	err := q.Bind(ctx, exec, chatUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from chat_user")
	}

	if err = chatUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return chatUserObj, err
	}

	return chatUserObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ChatUser) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChatUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chat_user provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chatUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chatUserInsertCacheMut.RLock()
	cache, cached := chatUserInsertCache[key]
	chatUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chatUserAllColumns,
			chatUserColumnsWithDefault,
			chatUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chatUserType, chatUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chatUserType, chatUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chat_user\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chat_user\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into chat_user")
	}

	if !cached {
		chatUserInsertCacheMut.Lock()
		chatUserInsertCache[key] = cache
		chatUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ChatUser record using the global executor.
// See Update for more documentation.
func (o *ChatUser) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ChatUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChatUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chatUserUpdateCacheMut.RLock()
	cache, cached := chatUserUpdateCache[key]
	chatUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chatUserAllColumns,
			chatUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update chat_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chat_user\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chatUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chatUserType, chatUserMapping, append(wl, chatUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update chat_user row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for chat_user")
	}

	if !cached {
		chatUserUpdateCacheMut.Lock()
		chatUserUpdateCache[key] = cache
		chatUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q chatUserQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q chatUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for chat_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for chat_user")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ChatUserSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChatUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chat_user\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chatUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in chatUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all chatUser")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ChatUser) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChatUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chat_user provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chatUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chatUserUpsertCacheMut.RLock()
	cache, cached := chatUserUpsertCache[key]
	chatUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chatUserAllColumns,
			chatUserColumnsWithDefault,
			chatUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			chatUserAllColumns,
			chatUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert chat_user, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chatUserPrimaryKeyColumns))
			copy(conflict, chatUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chat_user\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chatUserType, chatUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chatUserType, chatUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert chat_user")
	}

	if !cached {
		chatUserUpsertCacheMut.Lock()
		chatUserUpsertCache[key] = cache
		chatUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ChatUser record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ChatUser) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ChatUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChatUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ChatUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chatUserPrimaryKeyMapping)
	sql := "DELETE FROM \"chat_user\" WHERE \"chat_id\"=$1 AND \"user_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from chat_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for chat_user")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q chatUserQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q chatUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no chatUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chat_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chat_user")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ChatUserSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChatUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chatUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chat_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chatUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chatUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chat_user")
	}

	if len(chatUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ChatUser) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ChatUser provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChatUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChatUser(ctx, exec, o.ChatID, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChatUserSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ChatUserSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChatUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChatUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chat_user\".* FROM \"chat_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chatUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChatUserSlice")
	}

	*o = slice

	return nil
}

// ChatUserExistsG checks if the ChatUser row exists.
func ChatUserExistsG(ctx context.Context, chatID string, userID string) (bool, error) {
	return ChatUserExists(ctx, boil.GetContextDB(), chatID, userID)
}

// ChatUserExists checks if the ChatUser row exists.
func ChatUserExists(ctx context.Context, exec boil.ContextExecutor, chatID string, userID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chat_user\" where \"chat_id\"=$1 AND \"user_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, chatID, userID)
	}
	row := exec.QueryRowContext(ctx, sql, chatID, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if chat_user exists")
	}

	return exists, nil
}

// Exists checks if the ChatUser row exists.
func (o *ChatUser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChatUserExists(ctx, exec, o.ChatID, o.UserID)
}
