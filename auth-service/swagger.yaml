basePath: /api/v1
definitions:
  controller.AblyTokenRequest:
    properties:
      capability:
        type: string
      clientId:
        type: string
      keyName:
        type: string
      mac:
        type: string
      nonce:
        type: string
      timestamp:
        type: integer
      ttl:
        type: integer
    type: object
  controller.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  controller.PublicUserRecord:
    properties:
      full_name:
        type: string
      id:
        type: string
      image:
        type: string
    type: object
  controller.TokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  controller.UserResponse:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  userService.TokenDTO:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  userService.UserLoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  userService.UserPatchDTO:
    properties:
      email:
        type: string
      full_name:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  userService.UserRefreshDTO:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  userService.UserRegisterDTO:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    required:
    - email
    - full_name
    - password
    - phone
    - username
    type: object
  userService.UserRequestNewPasswordDTO:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  userService.UserResetPasswordDTO:
    properties:
      confirmPassword:
        type: string
      password:
        minLength: 6
        type: string
      step:
        enum:
        - validate
        - define
        type: string
      token:
        type: string
    required:
    - step
    - token
    type: object
host: www.quible.io
info:
  contact: {}
  description: Authentication and authorization service of Quible.io
  title: Quible auth-service
  version: "0.1"
paths:
  /docs:
    get:
      description: Render Swagger UI page
      parameters:
      - default: swagger
        description: UI template
        enum:
        - swagger
        - rapidoc
        - redoc
        in: query
        name: ui
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Swagger UI
      tags:
      - docs
  /docs/errors:
    get:
      description: Renders the list of errors reported by the microservice
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Error Codes UI
      tags:
      - docs
  /docs/spec:
    get:
      description: Swagger spec in YAML format
      produces:
      - application/yaml
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Swagger spec
      tags:
      - docs
  /login:
    post:
      consumes:
      - application/json
      description: Login with user credentials to get token
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userService.UserLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Login
      tags:
      - user
      - public
  /rt/token:
    get:
      description: Returns user profile corresponding to provided ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.AblyTokenRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get new `TokenRequest` for client Ably SDK
      tags:
      - realtime
      - private
  /user:
    get:
      description: Returns user profile associated with the token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get user
      tags:
      - user
      - private
    patch:
      consumes:
      - application/json
      description: Updates user profile associated with the token
      parameters:
      - description: Partial user object to be used for update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userService.UserPatchDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update user
      tags:
      - user
      - private
    post:
      consumes:
      - application/json
      description: Register a new user.
      parameters:
      - description: User registration information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userService.UserRegisterDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Register
      tags:
      - user
      - public
  /user/{userId}/image:
    get:
      description: Retrieves the profile image of a user.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - image/*
      responses:
        "200":
          description: OK
          schema:
            type: file
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get Profile Image
      tags:
      - user
      - public
  /user/{userId}/profile:
    get:
      description: Returns user profile corresponding to provided ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.PublicUserRecord'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get public user profile by ID
      tags:
      - user
      - private
  /user/activate:
    post:
      description: Handles user activation initiated by clicking link from email
      parameters:
      - description: JWT generated during registration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userService.TokenDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Activate new user
      tags:
      - user
      - public
  /user/image:
    put:
      consumes:
      - multipart/form-data
      description: Uploads a profile image for the current user.
      parameters:
      - description: Profile Image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Upload Profile Image
      tags:
      - user
      - private
  /user/password-reset:
    post:
      consumes:
      - application/json
      description: Validates provided JWT, password, and, if successful -- updates
        the password for the user identified by JWT
      parameters:
      - description: Password and its confirmation
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userService.UserResetPasswordDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Resets user's password
      tags:
      - user
      - password
  /user/refresh:
    post:
      consumes:
      - application/json
      description: Login with user credentials to get token
      parameters:
      - description: User's refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userService.UserRefreshDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Refresh access/refresh tokens
      tags:
      - user
      - public
  /user/request-new-password:
    post:
      consumes:
      - application/json
      description: Allows users to recover their forgotten password by submitting
        associated email address
      parameters:
      - description: User's email address
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userService.UserRequestNewPasswordDTO'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "424":
          description: Failed Dependency
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Request new password (password forgotten flow)
      tags:
      - user
      - public
      - password
swagger: "2.0"
