basePath: /api/v1
definitions:
  ably.TokenRequest:
    properties:
      capability:
        description: |-
          Capability represents encoded channel access rights associated with this Ably Token.
          The capabilities value is a JSON-encoded representation of the resource paths and associated operations.
          Read more about capabilities in the [capabilities docs].
          default '{"*":["*"]}' (RSA9f, TK2b)

          [capabilities docs]: https://ably.com/docs/core-features/authentication/#capabilities-explained
        type: string
      clientId:
        description: |-
          ClientID is used for identifying this client when publishing messages or for presence purposes.
          The clientId can be any non-empty string, except it cannot contain a *. This option is primarily intended
          to be used in situations where the library is instantiated with a key.
          Note that a clientId may also be implicit in a token used to instantiate the library.
          An error is raised if a clientId specified here conflicts with the clientId implicit in the token.
          Find out more about [identified clients] (TK2c).

          [identified clients]: https://ably.com/docs/core-features/authentication#identified-clients
        type: string
      keyName:
        description: |-
          KeyName is the name of the key against which this request is made.
          The key name is public, whereas the key secret is private (TE2).
        type: string
      mac:
        description: MAC is the Message Authentication Code for this request.
        type: string
      nonce:
        description: |-
          Nonce is a cryptographically secure random string of at least 16 characters,
          used to ensure the TokenRequest cannot be reused (TE2).
        type: string
      timestamp:
        description: |-
          Timestamp of the token request as milliseconds since the Unix epoch.
          Timestamps, in conjunction with the nonce, are used to prevent requests from being replayed.
          timestamp is a "one-time" value, and is valid in a request, but is not validly a member of
          any default token params such as ClientOptions.defaultTokenParams (RSA9d, Tk2d).
        type: integer
      ttl:
        description: |-
          TTL is a requested time to live for the token in milliseconds. If the token request
          is successful, the TTL of the returned token will be less than or equal
          to this value depending on application settings and the attributes
          of the issuing key.
          The default is 60 minutes (RSA9e, TK2a).
        type: integer
    type: object
  controller.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  controller.PublicUserRecord:
    properties:
      full_name:
        type: string
      id:
        type: string
      image:
        type: string
    type: object
  controller.TokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  controller.UserResponse:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  service.UserLoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  service.UserPatchDTO:
    properties:
      email:
        type: string
      full_name:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  service.UserRefreshDTO:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  service.UserRegisterDTO:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    required:
    - email
    - full_name
    - password
    - phone
    - username
    type: object
host: www.quible.io
info:
  contact: {}
  description: Authentication and authorization service of Quible.io
  title: Quible auth-service
  version: "0.1"
paths:
  /docs:
    get:
      description: Render Swagger UI page
      parameters:
      - default: swagger
        description: UI template
        enum:
        - swagger
        - rapidoc
        - redoc
        in: query
        name: ui
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Swagger UI
      tags:
      - docs
  /docs/errors:
    get:
      description: Renders the list of erros reported by the microservice
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Error Codes UI
      tags:
      - docs
  /docs/spec:
    get:
      description: Swagger spec in YAML format
      produces:
      - application/yaml
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Swagger spec
      tags:
      - docs
  /login:
    post:
      consumes:
      - application/json
      description: Login with user credentials to get token
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.UserLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Login
      tags:
      - user
      - public
  /rt/token:
    get:
      description: Returns user profile corresponding to provided ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ably.TokenRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get new `TokenRequest` for client Ably SDK
      tags:
      - realtime
      - private
  /user:
    get:
      description: Returns user profile associated with the token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get user
      tags:
      - user
      - private
    patch:
      consumes:
      - application/json
      description: Updates user profile associated with the token
      parameters:
      - description: Partial user object to be used for update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.UserPatchDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Update user
      tags:
      - user
      - private
    post:
      consumes:
      - application/json
      description: Register a new user.
      parameters:
      - description: User registration information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.UserRegisterDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Register
      tags:
      - user
      - public
  /user/{userId}:
    get:
      description: Returns user profile corresponding to provided ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.PublicUserRecord'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get public user profile by ID
      tags:
      - user
      - private
  /user/{userId}/image:
    get:
      description: Retrieves the profile image of a user.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - image/*
      responses:
        "200":
          description: OK
          schema:
            type: file
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Get Profile Image
      tags:
      - user
      - public
  /user/image:
    put:
      consumes:
      - multipart/form-data
      description: Uploads a profile image for the current user.
      parameters:
      - description: Profile Image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Upload Profile Image
      tags:
      - user
      - private
  /user/refresh:
    post:
      consumes:
      - application/json
      description: Login with user credentials to get token
      parameters:
      - description: User's refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.UserRefreshDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: Refresh access/refresh topens
      tags:
      - user
      - public
swagger: "2.0"
